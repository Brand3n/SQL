-- For this project, I downloaded Spotify data from Kaggle.
-- Then I created a table to insert Spotify data into.
-- Finally, I performed analytics on the data using SQL. 

--Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL)

--Then I inserted the Spotify Data .csv into the table.
--Next, I explored the data using the following SQL.

--Is there a direct correlation with danceability and popularity? NO

SELECT popularity, danceability FROM BIT_DB.Spotifydata
ORDER BY popularity desc;

---Is there a direct correlation with energy and popularity? NO

SELECT popularity, energy FROM BIT_DB.Spotifydata
ORDER BY popularity desc;

--Do short track names impact popularity? NO

SELECT popularity, length(track_name) FROM BIT_DB.Spotifydata
ORDER BY popularity desc;

--Does energy correlate with danceability? Not linear, but trend present having a few outliers.

SELECT danceability, energy FROM BIT_DB.Spotifydata
ORDER BY energy desc;

--From this data, what artist has the most overall popularity?

SELECT artist_name, sum(popularity) popular FROM BIT_DB.Spotifydata
GROUP BY artist_name
Order BY popular desc;

-- List top rate artists with average popularity and quantity of songs included in assessment?

SELECT artist_name, 
  count(artist_name) AS entries, 
  sum(popularity)/count(artist_name) AS Avg_pop 
FROM BIT_DB.Spotifydata
GROUP BY artist_name 
ORDER BY Avg_pop desc;

--Calculate the average popularity for the artists in the Spotify data table. 
--Then, for every artist with an average popularity of 90 or above, show their name, 
--their average popularity, and label them as a “Top Star”.

WITH tempTable AS (
SELECT artist_name, avg(popularity) AS Avg_Popularity
FROM Spotifydata
GROUP BY artist_name
)
SELECT artist_name, Avg_Popularity, 'Top Star' AS tag
FROM tempTable 
WHERE Avg_Popularity >= 90
ORDER BY Avg_Popularity desc;
